¬†üîπ What is Data?
Data is a collection of raw facts and figures that, when processed, provide meaningful information. In the context of databases and SQL, data refers to the values stored in tables.

üîπ How is Data Stored in SQL?
Data in SQL is organized in a relational database, which uses tables to store information.

‚¶Å	Tables consist of rows and columns
‚¶Å	A row (also called a record) represents a single entry
‚¶Å	A column represents a data field or attribute
‚¶Å	Each column has a specific data type (e.g., INT, VARCHAR, DATE)

üîπ Example Table: Students

| ID	| Name	| Age	| Grade |
|  1	| Alice	| 20	|   A	|
|  2	| Bob	| 22	|   B	|

ID: Unique identifier (usually an integer)
Name: Student‚Äôs name (text)
Age: Student‚Äôs age (integer)
Grade: Letter grade (text)

üîπ Types of Data in SQL

| Data Type | Description          | Example      |
| --------- | -------------------- | ------------ |
| `INT`     | Integer number       | 25           |
| `VARCHAR` | Variable-length text | "Alice"      |
| `DATE`    | Date value           | 2025-08-10   |
| `BOOLEAN` | True or False value  | TRUE / FALSE |
| `FLOAT`   | Decimal number       | 3.14         |



üîπWhat is a Database?

A database is an organized collection of related data that can be easily accessed, managed, and updated.
It stores data in a structured format, usually in the form of tables, and allows users to perform operations such as insert, update, delete, and query the data.

üîπ Key Features of a Database
‚¶Å	¬†Stores large amounts of data efficiently
‚¶Å	¬†Supports easy data access and retrieval
‚¶Å	¬†Maintains data accuracy and integrity
‚¶Å	¬†Allows multiple users to access data simultaneously
‚¶Å	¬†Offers security and backup features

üîπ Components of a Database:

| Component            | Description                                 |
| -------------------- | ------------------------------------------- |
|   Tables             | Store data in rows and columns              |
|   Fields (Columns)   | Define the type of data stored              |
|   Records (Rows)     | Individual entries in the table             |
|   Keys               | Uniquely identify data (e.g., Primary Key)  |
|   Schema             | Structure that defines the database objects |

üîπ Example: Simple Students Database

| ID | Name  | Age | Grade |
| -- | ----- | --- | ----- |
| 1  | Alice | 20  | A     |
| 2  | Bob   | 22  | B     |

üîπ Types of Databases :

| Type                   | Description                                       |
| ---------------------- | ------------------------------------------------- |
|   Relational (RDBMS)   | Data stored in tables; uses SQL                   |
|   NoSQL                | Non-tabular format (e.g., documents, key-value)   |
|   Cloud Databases      | Hosted online, scalable (e.g., AWS RDS, Firebase) |


üîπ What is DBMS?

A Database Management System (DBMS) is software that helps create, manage, and manipulate databases.
It allows users to store, retrieve, update, and delete data efficiently while maintaining data integrity and security.

üîπ Examples of Database Software
‚¶Å	MySQL
‚¶Å	PostgreSQL
‚¶Å	SQLite
‚¶Å	Microsoft SQL Server
‚¶Å	Oracle Database

üîπ Why DBMS?

‚¶Å Data Storage ‚Äì Stores large volumes of data efficiently.
‚¶Å Data Abstraction ‚Äì Hides the complexity of data storage from users.
‚¶Å Controls Data Redundancy ‚Äì Minimizes duplicate data.
‚¶Å Multi-user Access and Views ‚Äì Supports concurrent access with personalized views.
‚¶Å Security ‚Äì Protects data through authentication and authorization.

üîπ Data Models

Data models define how the logical structure of a database is modelled.
They also define how data is connected to each other, how it is processed, and stored inside the system.

üîπTypes of Data Models:

1.	Hierarchical Model
Organizes data in a tree-like structure.
Each record has a parent-child relationship.
2.	Network Model
Uses a graph structure with nodes (records) and edges (relationships).
Records can have multiple parent and child records.
3.	Entity Relationship (ER) Model
Uses entities (objects) and relationships to describe data.
Commonly used in database design before converting to a relational model.
4.	Relational Model
Organizes data into tables (relations) with rows (tuples) and columns (attributes).
Uses keys to establish relationships between tables.
5.	NoSQL Model
Designed for unstructured or semi-structured data.
¬†  Types include document-based, key-value, column-oriented, and graph databases.

üîπSQL (Structured Query Language)

SQL is the standard language used to store, manipulate, and retrieve data in relational databases.

‚¶Å	It is a database programming language used for the retrieval and management of data in a relational database.
‚¶Å	All Relational Database Management Systems (RDBMS) like MySQL, Oracle, MS Access, and SQL Server use SQL as their standard database language.

üîπWhat SQL Does?

‚¶Å	Create Databases & Tables ‚Äì SQL can be used to create new databases and tables to store data.
‚¶Å	Execute Queries ‚Äì SQL can run queries against a database to fetch specific information.
‚¶Å	Manage Data ‚Äì SQL can retrieve, update, delete, and insert records into tables.
‚¶Å	Create Stored Procedures & Views ‚Äì SQL allows defining reusable queries and stored logic.
‚¶Å	Set Permissions ‚Äì SQL can grant or revoke access rights on tables, views, and procedures.


comparison between DBMS and SQL

| **Feature**    | **DBMS**  (Database Management System)                  | **SQL** (Structured Query Language)                           |
| -------------- | --------------------------------------------------------| ------------------------------------------------------------- |
|   Definition   | DBMS  is software that manages and organizes databases. | SQL is a language used to interact with databases.	           |
| **Function**   | Stores, retrieves, updates, and manages data.           | Creates, queries, updates, and manipulates data inside a DBMS.|
| **Type**       | A tool/system.                                          | A query language.                                             |
| **Examples**   | MySQL, Oracle, PostgreSQL, MS Access, MongoDB.          | `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`.             |
| **Usage**      | Provides the environment to store and manage data.      | Used inside DBMS to perform operations on data.               |
| **Dependency** | Can work without SQL (e.g., NoSQL DBMS like MongoDB).   | Cannot work without a DBMS.                                   |
| **Analogy**    | DBMS = kitchen (where food is prepared).                | SQL = chef‚Äôs instructions (how to cook the food).             |


üîπ Types of SQL Commands with Examples

1. DDL (Data Definition Language) ‚Äì Defines the database structure.[C A T D]
‚¶Å	CREATE, ALTER, DROP, TRUNCATE.

| **Command**  | 			    Definition                          | 		  Purpose                                |             Example                            |
| ------------ | -------------------------------------------------------------- | ------------------------------------------------------ | ---------------------------------------------- |
| **CREATE**   | Creates new database objects like tables, databases, or views. | To define and add new structures to the database.      | CREATE TABLE Products (ProductID INT,
¬†																	   ProductName VARCHAR(100), Price DECIMAL(10,2));|

| **ALTER**    | Modifies the structure of an existing object.                  | To add, modify, or delete columns.                     | ALTER TABLE Products ADD Category VARCHAR(50); |
| **DROP**     | Deletes database objects permanently.                          | To remove objects that are no longer needed.           | DROP TABLE Products;				  |
| **TRUNCATE** | Deletes all data from a table but keeps its structure.         | To quickly remove all rows without deleting the table. | TRUNCATE TABLE Products;   			  |

2. DML (Data Manipulation Language) ‚Äì Manages data within tables.{S I D U}
‚¶Å	SELECT, INSERT, DELETE, UPDATE

| **Command** | **Definition**                          | **Purpose**                                                |   **Example**          					     |
| ----------- | --------------------------------------- | ---------------------------------------------------------- | ------------------------------------------------------------- |
|   SELECT    | Retrieves data from one or more tables. | To fetch specific columns, rows, or aggregated results.    | `SELECT ProductName, Price FROM Products WHERE Price > 50000; |
|   INSERT    | Adds new records (rows) into a table.   | To insert data into the database.                          | `INSERT INTO Products (ProductID, ProductName, Price, Stock)
¬†													        	VALUES (1, 'Laptop', 55000, 10);  |

|   UPDATE    | Modifies existing records in a table.   | To change stored data.                                     | `UPDATE Products SET Price = 50000 WHERE ProductID = 1;`	     |
|   DELETE    | Removes records from a table.           | To delete specific data while keeping the table structure. | `DELETE FROM Products WHERE ProductID = 1;`		     |

3. DCL (Data Control Language) ‚Äì Controls access and permissions.
‚¶Å	GRANT, REVOKE

| **Command** | **Definition**                                          | **Purpose**                                | **Example**                                  |
| ----------- | ------------------------------------------------------- | ------------------------------------------ | -------------------------------------------- |
|   GRANT     | Gives specific privileges to users on database objects. | To allow users to perform certain actions. | `GRANT SELECT, INSERT ON Products TO user1;` |
|   REVOKE    | Removes previously granted privileges from users.       | To restrict user access.                   | `REVOKE INSERT ON Products FROM user1;`      |

4. TCL (Transaction Control Language) ‚Äì Manages transactions.

|  Command  |                             Definition                                        |                              Use Case                                     | **Example**
| --------- | ----------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ---------------- |
| COMMIT    | Saves all changes made during the transaction permanently to the database.    | When you want to make sure your changes are stored.                       | `COMMIT;`	   |
| ROLLBACK  | Undoes changes made during the current transaction before they are committed. | When an error occurs and you need to revert changes.                      | `ROLLBACK;`      |
| SAVEPOINT | Creates a named point in a transaction that you can roll back to later.       | When you want partial rollbacks instead of undoing the whole transaction. | `SAVEPOINTsp1;   																					 `ROLLBACK TO sp1;`|

üîπDATA TYPES

| **Category**         | **Data Type**                   | **Definition**                                        | **Example Value**        |
| -------------------- | ------------------------------- | ----------------------------------------------------- | ------------------------ |
| **Numeric**          | `INT` / `INTEGER`               | Whole numbers.                                        | `100`                    |
|                      | `DECIMAL(p,s)` / `NUMERIC(p,s)` | Fixed-point numbers with precision `p` and scale `s`. | `123.45`                 |
|                      | `FLOAT` / `REAL`                | Approximate decimal numbers.                          | `3.14159`                |
| **Character/String** | `CHAR(n)`                       | Fixed-length string (padded with spaces if shorter).  | `'Hello '`               |
|                      | `VARCHAR(n)`                    | Variable-length string (up to `n` characters).        | `'Hello'`                |
|                      | `TEXT`                          | Large amount of text.                                 | `"This is a paragraph."` |
| **Date/Time**        | `DATE`                          | Stores date in `YYYY-MM-DD` format.                   | `2025-08-10`             |
|                      | `TIME`                          | Stores time in `HH:MM:SS` format.                     | `14:35:00`               |
|                      | `DATETIME` / `TIMESTAMP`        | Stores date and time.                                 | `2025-08-10 14:35:00`    |
| **Boolean**          | `BOOLEAN`                       | True/False values.                                    | `TRUE`                   |
| **Binary**           | `BLOB`                          | Binary large objects (images, files, etc.).           | (image data)             |

üîπSQL Constraints

SQL Constraints are rules applied to table columns to ensure the accuracy, validity, and reliability of the data stored in a database.
They control what kind of values can be inserted, updated, or deleted in a table, preventing invalid data entry.
-
| Constraint      |                          Definition                                      |                         Example                                  |
| --------------- | ------------------------------------------------------------------------ | ---------------------------------------------------------------- |
|   NOT NULL      | Ensures a column cannot have `NULL` (empty) values.                      | `CREATE TABLE Products (ProductID INT NOT NULL);`                |
|   UNIQUE        | Ensures all values in a column are different.                            | `CREATE TABLE Users (Email VARCHAR(100) UNIQUE);`                |
|   PRIMARY KEY   | Uniquely identifies each record in a table (combines NOT NULL + UNIQUE). | `CREATE TABLE Customers (ID INT PRIMARY KEY, Name VARCHAR(50));` |
|   FOREIGN KEY   | Ensures values match an existing value in another table's primary key.   | `FOREIGN KEY (CustomerID) REFERENCES Customers(ID);`             |
|   CHECK         | Ensures that values in a column satisfy a specific condition.            | `CHECK (Age >= 18);`                                             |
|   DEFAULT       | Sets a default value if none is provided for a column.                   | `DEFAULT 'Active';`                                              |
|   KEYS          | Defines indexing and relationship rules like primary key & foreign key.  | `PRIMARY KEY (OrderID)`                                          |


Filtering & Conditions

| Keyword      |                   Definition                    |                            Example                                  |
| ------------ | ----------------------------------------------- | ------------------------------------------------------------------- |
| **WHERE**    | Filters rows based on a condition.              | `SELECT \\\\\\\\\\\\\\\* FROM Products WHERE Price > 100;`                         |
| **AND**      | Combines multiple conditions; all must be true. | `SELECT \\\\\\\\\\\\\\\* FROM Products WHERE Price > 100 AND Stock > 10;`          |
| **IN**       | Matches a value in a list.                      | `SELECT \\\\\\\\\\\\\\\* FROM Products WHERE Category IN ('Electronics','Books');` |
| **NOT IN**   | Matches values not in a list.                   | `SELECT \\\\\\\\\\\\\\\* FROM Products WHERE Category NOT IN ('Clothes');`         |
| **BETWEEN**  | Checks if a value is within a range.            | `SELECT \\\\\\\\\\\\\\\* FROM Products WHERE Price BETWEEN 100 AND 500;`           |
| **LIKE**     | Matches patterns with wildcards.                | `SELECT \\\\\\\\\\\\\\\* FROM Products WHERE Name LIKE 'S%';`                      |
| **NULL**     | Checks for missing values.                      | `SELECT \\\\\\\\\\\\\\\* FROM Products WHERE Discount IS NULL;`                    |
| **NOT NULL** | Ensures the value exists.                       | `SELECT \\\\\\\\\\\\\\\* FROM Products WHERE Name IS NOT NULL;`                    |

Sorting & Ordering

| Keyword      |                        Definition                         |              Example                          |
| ------------ | --------------------------------------------------------- | --------------------------------------------- |
| **ORDER BY** | Sorts results in ascending (default) or descending order. | `SELECT \\\\\\\\\\\\\\\* FROM Products ORDER BY Price;`      |
| **DESC**     | Sorts results in descending order.                        | `SELECT \\\\\\\\\\\\\\\* FROM Products ORDER BY Price DESC;` |

Output Control
| Keyword      |                   Definition                 |                Example                      |
| ------------ | -------------------------------------------- | ------------------------------------------- |
| **DISTINCT** | Returns unique results, removing duplicates. | `SELECT DISTINCT Category FROM Products;`   |
| **AS**       | Gives an alias to a column or table.         | `SELECT Name AS ProductName FROM Products;` |


SQL Aggregate Functions

SQL Aggregate Functions are predefined functions that perform calculations on a set of values (rows) and return a single summarized value.

| Function    |                       Definition                             |                         Example                                   |
| ----------- | ------------------------------------------------------------ | ----------------------------------------------------------------- |
| **COUNT()** | Returns the number of rows (or non-NULL values) in a column. | `SELECT COUNT(\\\\\\\\\\\\\\\*) FROM Products WHERE Category = 'Electronics';`   |
| **SUM()**   | Returns the total sum of a numeric column.                   | `SELECT SUM(Price) FROM Products WHERE Category = 'Electronics';` |
| **AVG()**   | Returns the average value of a numeric column.               | `SELECT AVG(Price) FROM Products WHERE Stock > 50;`               |
| **MIN()**   | Returns the smallest value in a column.                      | `SELECT MIN(Price) FROM Products WHERE Category = 'Books';`       |
| **MAX()**   | Returns the largest value in a column.                       | `SELECT MAX(Price) FROM Products WHERE Category = 'Clothes';`     |


| Keyword      |                          Definition                                           		      |                    Example                                     |
|--------------|----------------------------------------------------------------------------------------------|----------------------------------------------------------------|
| **GROUP BY** | Groups rows that have the same values into summary rows using aggregate functions. 	      | `SELECT customer, SUM(amount) FROM Sales GROUP BY customer;`   |

| **HAVING**   | Filters grouped records based on a condition, used with `GROUP BY` (like `WHERE` for groups).| `SELECT customer, SUM(amount) FROM Sales GROUP BY customer 
																	HAVING SUM(amount) > 200;` 	       |

JOINS

A JOIN in SQL is used to combine rows from two or more tables based on a related column between them, usually a foreign key relationship.


Table: employees

| employee_id | name    | department_id |
| ------------ | ------- | -------------- |
| 1            | Alice   | 10             |
| 2            | Bob     | 20             |
| 3            | Charlie | 30             |
| 4            | David   | NULL           |

Table: departments

| department_id  | department_name  |
| -------------- | ---------------- |
| 10             | HR               |
| 20             | Engineering      |
| 40             | Marketing        |

üîπ 1. INNER JOIN

Returns only the rows where there is a match in both tables.


Query:

SELECT e.name, d.department_name
FROM employees e
INNER JOIN departments d
ON e.department_id = d.department_id;

üî∏ Result:

| name  | department_name  |
| ----- | ---------------- |
| Alice | HR               |
| Bob   | Engineering      |

üîπ 2. LEFT JOIN (or LEFT OUTER JOIN)

Returns all rows from the left table (employees), and matched rows from the right table. If there's no match, NULL is returned for the right table's columns.

Query:

SELECT e.name, d.department_name
FROM employees e
LEFT JOIN departments d
ON e.department_id = d.department_id;

üî∏ Result:

| name    | department_name  |
| ------- | ---------------- |
| Alice   | HR               |
| Bob     | Engineering      |
| Charlie | NULL             |
| David   | NULL             |

üîπ 3. RIGHT JOIN (or RIGHT OUTER JOIN)

Returns all rows from the right table (departments), and matched rows from the left table. If no match, NULL on the left.

Query:

SELECT e.name, d.department_name
FROM employees e
RIGHT JOIN departments d
ON e.department_id = d.department_id;

üî∏ Result:

| name  | department_name  |
| ----- | ---------------- |
| Alice | HR               |
| Bob   | Engineering      |
| NULL  | Marketing        |

üîπ 4. FULL OUTER JOIN

Returns all rows when there is a match in one of the tables. Rows without a match get NULLs for the missing side.

Query : 

SELECT e.name, d.department_name
FROM employees e
FULL OUTER JOIN departments d
ON e.department_id = d.department_id;

üî∏ Result:

| name    | department_name  |
| ------- | ---------------- |
| Alice   | HR               |
| Bob     | Engineering      |
| Charlie | NULL             |
| David   | NULL             |
| NULL    | Marketing        |

Summary:

| Type of Join    | Returns                                                     |
| --------------- | ----------------------------------------------------------- |
| INNER JOIN      | Only matched rows from both tables                          |
| LEFT JOIN       | All from left table + matched from right (NULL if no match) |
| RIGHT JOIN      | All from right table + matched from left (NULL if no match) |
| FULL OUTER JOIN | All rows from both tables (NULLs where no match)            |
| CROSS JOIN      | All combinations (Cartesian product)                        |
